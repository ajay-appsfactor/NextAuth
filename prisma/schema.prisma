generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  customer
  superadmin
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id          Int        @id @default(autoincrement())
  first_name  String
  last_name   String
  email       String     @unique
  password    String
  role        Role       @default(customer)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?

  customer    Customer[]
}

model Customer {
  id                   Int       @id @default(autoincrement())
  user_id              Int       
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  first_name           String?
  last_name            String?
  email                String?   @unique
  company              String?
  address              String?
  city                 String?
  state                String?
  zip                  String?
  country              String?
  phone                String?
  mobile               String?

  shipping_first_name  String?
  shipping_last_name   String?
  shipping_company     String?
  shipping_address     String?
  shipping_city        String?
  shipping_state       String?
  shipping_zip         String?
  shipping_country     String?
  shipping_phone       String?
  shipping_mobile      String?

  send_invoice         String?
  conformance          String?
  terms                String?
  freight              String?

  customer_note        String?   @db.VarChar(250)
  quality_note         String?   @db.VarChar(250)
  accounting_note      String?   @db.VarChar(250)
  shipping_note        String?   @db.VarChar(250)
  sales_note           String?   @db.VarChar(250)
  about                String?   @db.VarChar(250)

  gender               Gender?   @default(OTHER)
  sorting              Int       @default(0)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  deleted_at           DateTime?

  @@map("customers")
}

model Vendor {
  vendor_id     Int              @id @default(autoincrement()) 
  vendor_code   String           @unique @db.VarChar(50)
  vendor_name   String           @db.VarChar(255)
  vendor_type   String?          @db.VarChar(100)
  email         String?          @db.VarChar(255)
  phone_number  String?          @db.VarChar(50)
  website       String?          @db.VarChar(255)
  status        String           @default("Active") @db.VarChar(50)
  notes         String?          @db.Text
  created_at    DateTime         @default(now())
  updated_at    DateTime         @default(now())

  contacts      VendorContact[]
  addresses     VendorAddress[]
  financial     VendorFinancial?
  metadata      VendorMetadata[]

  @@map("vendors")
}

model VendorContact {
  contact_id    Int     @id @default(autoincrement()) @map("contact_id")
  vendor_id     Int       
  name          String? @db.VarChar(255)
  job_title     String? @db.VarChar(100)
  email         String? @db.VarChar(255)
  phone_number  String? @db.VarChar(50)
  is_primary    Boolean @default(false)

  vendor        Vendor  @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@map("vendor_contacts")
}

model VendorAddress {
  address_id       Int     @id @default(autoincrement()) @map("address_id")
  vendor_id        Int
  address_type     String? @db.VarChar(50)
  address_line1    String? @db.VarChar(255)
  address_line2    String? @db.VarChar(255)
  city             String? @db.VarChar(100)
  state_province   String? @db.VarChar(100)
  postal_code      String? @db.VarChar(20)
  country          String? @db.VarChar(100)

  vendor           Vendor  @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@map("vendor_addresses")
}

model VendorFinancial {
  vendor_id            Int     @id
  bank_name            String? @db.VarChar(100)
  bank_account_number  String? @db.VarChar(100)
  swift_iban_code      String? @db.VarChar(100)
  preferred_currency   String? @db.VarChar(10)
  payment_terms        String? @db.VarChar(50)
  tax_number           String? @db.VarChar(100)
  vat_number           String? @db.VarChar(100)
  credit_limit         Decimal? @db.Decimal(18, 2)

  vendor               Vendor  @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@map("vendor_financials")
}

model VendorMetadata {
  metadata_id  Int     @id @default(autoincrement()) @map("metadata_id")
  vendor_id    Int
  key          String? @db.VarChar(100)
  value        String? @db.Text

  vendor       Vendor  @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@map("vendor_metadata")
}
